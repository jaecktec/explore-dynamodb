plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.noarg" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "com.chrisgahlert.gradle-dcompose-plugin" version "0.16.0"
    id "application"
}

version "0.1"
group "com.example"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation(platform("software.amazon.awssdk:bom:$awsSdkVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut.configuration:micronaut-openapi")
    kapt("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutinesVersion")
//    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$coroutinesVersion")

    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("com.github.java-json-tools:json-patch:1.13")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")

    implementation("software.amazon.awssdk:dynamodb")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    kaptTest(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("io.mockk:mockk:1.10.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    // for graal-vm
    compileOnly("org.graalvm.nativeimage:svm")
    annotationProcessor("io.micronaut:micronaut-graal")
}

test.classpath += configurations.developmentOnly

mainClassName = "com.example.ApplicationKt"

// needs to be before all of dcompose related stuff
dcompose {
    networks {
        backend
    }

    dynamoTest {
        image = 'amazon/dynamodb-local'
        portBindings = ['8000']

        deploy = false
    }
}

createDynamoTestContainer.outputs.upToDateWhen { false }

test {
    dependsOn dcompose.dynamoTest
    finalizedBy dcompose.dynamoTest.removeContainerTaskName

    doFirst {
        // Pass in the configuration properties to the integration test so they can connect to the mongo test container
        systemProperty 'dynamo.table', 'PetStore'
        systemProperty 'dynamo.create-table', 'true'
        systemProperty 'dynamo.endpoint', "http://${dcompose.dynamoTest.dockerHost + ":" + dcompose.dynamoTest.findHostPort(8000)}"
    }

    doLast {
        systemProperties.remov                                                e 'dynamo.create-table'
        systemProperties.remove 'dynamo.endpoint'
        systemProperties.remove 'dynamo.table'
    }

    // use JUnit 5 platform
    useJUnitPlatform()
}


java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
    annotations(
            "io.micronaut.aop.Around",
            "javax.inject.Singleton",
            "javax.validation.Valid",
            "io.micronaut.http.annotation.Controller",
            "io.micronaut.validation.Validated"
    )
}

noArg {
    invokeInitializers = true
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", false)
        arg("micronaut.processing.annotations", "com.example.*")
        arg("micronaut.processing.group", "com.example")
        arg("micronaut.processing.module", "explore-dynamodb")
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart': 'true',
                'micronaut.io.watch.enabled': 'true',
                "micronaut.io.watch.paths": "src/main"
        )
    }
}


